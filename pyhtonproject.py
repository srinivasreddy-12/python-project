# -*- coding: utf-8 -*-
"""PyhtonProject.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1QHNeDcPm4QfkhMWOpU0f1ajaZqTZAdDg
"""

import pandas as pd
df = pd.read_csv('/content/deepfake_detection_dataset_extended.csv')
df

df.head()

df.tail()

df.info()

df.isnull()

df.isnull().sum()

df.describe()

df["Eye_Blink_Rate"].mean()

df["Eye_Blink_Rate"].median()

correlation=df["Face_Landmark_Distortion"].corr(df["Is_Deepfake"])
print(correlation)

covariance=df["Face_Landmark_Distortion"].cov(df["Is_Deepfake"])
print(covariance)

Head_Movement_Average = df.groupby("Head_Movement_Consistency")["Is_Deepfake"].mean()
print(Head_Movement_Average)
Lip_sync_error_Average = df.groupby("Lip_Sync_Error")["Is_Deepfake"].mean()
print(Lip_sync_error_Average)
Eye_Blink_Rate_Average = df.groupby("Eye_Blink_Rate")["Is_Deepfake"].mean()
print(Eye_Blink_Rate_Average)
Face_Landmark_Distortion_Average = df.groupby("Face_Landmark_Distortion")["Is_Deepfake"].mean()
print(Face_Landmark_Distortion_Average)
Texture_Artifacts_Score_Average = df.groupby("Texture_Artifacts_Score")["Is_Deepfake"].mean()
print(Texture_Artifacts_Score_Average)
Audio_Visual_Mismatch_Average = df.groupby("Audio_Visual_Mismatch")["Is_Deepfake"].mean()
print(Audio_Visual_Mismatch_Average)

df = df.fillna(method = "bfill")
df = df.fillna(method = "ffill")
df

df.isnull().sum()

df.nunique()

print("Head of the DataFrame:")
print(df.head())
print("\nTail of the DataFrame:")
print(df.tail())
print("\nDataFrame Information:")
print(df.info())
print("\nDescriptive Statistics:")
print(df.describe())
print("\nMean of Eye_Blink_Rate:", df["Eye_Blink_Rate"].mean())
print("Median of Eye_Blink_Rate:", df["Eye_Blink_Rate"].median())

correlation = df["Face_Landmark_Distortion"].corr(df["Is_Deepfake"])
print("\nCorrelation between Face_Landmark_Distortion and Is_Deepfake:", correlation)
covariance = df["Face_Landmark_Distortion"].cov(df["Is_Deepfake"])
print("Covariance between Face_Landmark_Distortion and Is_Deepfake:", covariance)

for col in ['Head_Movement_Consistency', 'Lip_Sync_Error', 'Eye_Blink_Rate',
            'Face_Landmark_Distortion', 'Texture_Artifacts_Score', 'Audio_Visual_Mismatch']:
    grouped_avg = df.groupby(col)["Is_Deepfake"].mean()
    print(f"\nAverage Is_Deepfake value grouped by {col}:\n{grouped_avg}")

df = df.fillna(method="bfill")
df = df.fillna(method="ffill")
print("\nNumber of missing values after filling:")
print(df.isnull().sum())
print("\nNumber of unique values in each column:")
print(df.nunique())

import matplotlib.pyplot as plt
import seaborn as sns
sns.boxplot(df ["Lip_Sync_Error"], legend="auto", color="skyblue", saturation=0.5,whis=1.5)
plt.title("Boxplot of Lip_Sync_Error", color="green")

plt.grid(alpha=0.3)

plt.show()

sns.pairplot(df,hue="Lip_Sync_Error", palette="Accent")
plt.show()

sns.barplot(x=df['Is_Deepfake'], y=df['Texture_Artifacts_Score'], data=df)
plt.title("Texture_Artifacts vs Deepfake")

plt.show()

df.hist(figsize=(10,12), bins=5)

plt.show()

import numpy as np
numerical_df = df.select_dtypes(include=np.number)

plt.figure(figsize=(10, 6))

sns.heatmap(numerical_df.corr(), annot=True, cmap='coolwarm')

plt.title("Correlation Heatmap")

plt.show()

numerical_df = df.select_dtypes (include=np.number)

plt.figure(figsize=(10, 6))

sns.heatmap(numerical_df.cov(), annot=True, cmap='coolwarm')

plt.title("Covariance Heatmap")

plt.show()

import matplotlib.pyplot as plt
plt.figure(figsize=(10, 5))
sns.barplot(x='Head_Movement_Consistency', y='Is_Deepfake', data=df)
plt.title('Is_Deepfake vs Head_Movement_Consistency')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

palette = sns.color_palette("husl", len(df.dtypes))

plt.figure(figsize=(10, 6))
df.dtypes.value_counts().plot(kind='bar', color=palette)
plt.title('Data Types in Dataset')
plt.xlabel('Data Type')
plt.ylabel('Count')
plt.show()

import matplotlib.pyplot as plt
plt.figure(figsize=(8, 8))
df['Is_Deepfake'].value_counts().plot.pie(autopct='%1.1f%%', startangle=90)
plt.title('Distribution of Deepfake Videos')
plt.ylabel('')
plt.show()

from sklearn.linear_model import LinearRegression
X = df[['Face_Landmark_Distortion']]
y = df['Is_Deepfake']
model = LinearRegression()
model.fit(X, y)
y_pred = model.predict(X)
plt.figure(figsize=(8, 6))
sns.scatterplot(x='Face_Landmark_Distortion', y='Is_Deepfake', data=df, color='blue', label='Data Points')
plt.plot(X, y_pred, color='red', linewidth=2, label='Regression Line')
plt.xlabel('Face Landmark Distortion')
plt.ylabel('Is Deepfake')
plt.title('Linear Regression: Face Landmark Distortion vs. Is Deepfake')
plt.legend()
plt.show()

print(f"Slope: {model.coef_[0]}")
print(f"Intercept: {model.intercept_}")

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler


scaler = StandardScaler()
scaled_data = scaler.fit_transform(numerical_df)


pca = PCA(n_components=2)
principal_components = pca.fit_transform(scaled_data)

pca_df = pd.DataFrame(data=principal_components, columns=['PC1', 'PC2'])

plt.figure(figsize=(8, 6))
plt.scatter(pca_df['PC1'], pca_df['PC2'], c=df['Is_Deepfake'], cmap='viridis')
plt.xlabel('Principal Component 1')
plt.ylabel('Principal Component 2')
plt.title('PCA Visualization')
plt.colorbar(label='Is_Deepfake')
plt.show()

print("Explained Variance Ratio:", pca.explained_variance_ratio_)

y_true = df['Is_Deepfake']
y_pred = model.predict(X)

threshold = 0.5
y_pred_class = [1 if p >= threshold else 0 for p in y_pred]
cm = confusion_matrix(y_true, y_pred_class)

plt.figure(figsize=(8, 6))
sns.heatmap(cm, annot=True, fmt="d", cmap="Blues",
            xticklabels=['Predicted 0', 'Predicted 1'],
            yticklabels=['Actual 0', 'Actual 1'])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

#univariate
plt.figure(figsize=(8, 6))
sns.distplot(df['Lip_Sync_Error'], kde=True)
plt.title('Distribution of Lip Sync Error')
plt.xlabel('Lip Sync Error')
plt.ylabel('Frequency')
plt.show()

plt.figure(figsize=(8, 6))
plt.hist(df['Texture_Artifacts_Score'], bins=10)
plt.title('Histogram of Texture Artifacts Score')
plt.xlabel('Texture Artifacts Score')
plt.ylabel('Frequency')
plt.show()
plt.figure(figsize=(8, 6))
sns.violinplot(y=df['Eye_Blink_Rate'])
plt.title('Violin Plot of Eye Blink Rate')
plt.ylabel('Eye Blink Rate')
plt.show()

#bivariate
import matplotlib.pyplot as plt
from sklearn.metrics import confusion_matrix
plt.figure(figsize=(10, 6))
sns.scatterplot(x='Face_Landmark_Distortion', y='Is_Deepfake', hue='Lip_Sync_Error', size='Texture_Artifacts_Score', data=df)
plt.title('Relationship between Features')
plt.xlabel('Face Landmark Distortion')
plt.ylabel('Is Deepfake')
plt.show()